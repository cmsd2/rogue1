use piston::input::keyboard::ModifierKey;

pub const MAP_EN_GB: &[char] = &[
    /* 0x0  */ '\0', '\0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  '0',  '-',  '=', '\x08', '\0',
    /* 0x10 */  'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  'o',  'p',  '[',  ']', '\n', '\0',  'a',  's',
    /* 0x20 */  'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';', '\'',  '`', '\0',  '#',  'z',  'x',  'c',  'v',
    /* 0x30 */  'b',  'n',  'm',  ',',  '.',  '/', '\0', '\0', '\0',  ' ', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x40 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x50 */ '\0', '\0', '\0', '\0', '\0', '\0', '\\', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x60 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x70 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x80 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x90 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xa0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xb0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xc0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xd0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xe0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xf0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
];

pub const SHIFT_MAP_EN_GB: &[char] = &[
    /* 0x0  */ '\0', '\0',  '!',  '"',  '£',  '$',  '%',  '^',  '&',  '*',  '(',  ')',  '_',  '+', '\x08', '\0',
    /* 0x10 */  'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  'O',  'P',  '{',  '}', '\n', '\0',  'A',  'S',
    /* 0x20 */  'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  '@',  '¬', '\0',  '~',  'Z',  'X',  'C',  'V',
    /* 0x30 */  'B',  'N',  'M',  '<',  '>',  '?', '\0', '\0', '\0',  ' ', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x40 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x50 */ '\0', '\0', '\0', '\0', '\0', '\0',  '|', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x60 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x70 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x80 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0x90 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xa0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xb0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xc0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xd0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xe0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
    /* 0xf0 */ '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
];

pub fn modify(_key_code: i32, scancode: Option<i32>, modifiers: ModifierKey) -> Option<char> {
    let scancode = scancode.unwrap_or(0);

    if scancode < 0 || (scancode as usize) >= MAP_EN_GB.len() {
        return None;
    }

    let c = if modifiers.contains(ModifierKey::SHIFT) {
        SHIFT_MAP_EN_GB[scancode as usize] as char
    } else {
        MAP_EN_GB[scancode as usize] as char
    };

    if c == '\0' {
        None
    } else {
        Some(c)
    }
}

pub fn is_printable(c: char) -> bool {
    !c.is_ascii_control() && !c.is_control()
}